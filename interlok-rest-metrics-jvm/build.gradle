ext {
  componentName='Interlok Management/REST: JVM Metrics'
  componentDesc="Collecting JVM metrics and exposing them via a REST endpoint"
  delombokTargetDir = new File("${project.projectDir}/src/main/generated")
}

dependencies {
  api project(':interlok-rest-base')
  api ('io.micrometer:micrometer-core:1.13.1')
  api ('io.github.mweirauch:micrometer-jvm-extras:0.2.2')

  testImplementation project(':interlok-rest-base').sourceSets.test.output
}

task javadocJar(type: Jar, dependsOn: javadoc) {
  classifier = 'javadoc'
  from javadoc.destinationDir
}

task examplesJar(type: Jar, dependsOn: test) {
  classifier = 'examples'
  from new File(buildDir, '/examples')
}

task sourcesJar(type: Jar, dependsOn: classes) {
  classifier = 'sources'
  from sourceSets.main.extensions.delombokTask
}

jar {
  manifest {
    attributes("Built-By": System.getProperty('user.name'),
              "Build-Jdk": System.getProperty('java.version'),
              "Implementation-Title": componentName,
              "Implementation-Version": project.version,
              "Implementation-Vendor-Id": project.group,
              "Implementation-Vendor": organizationName)
  }
}
artifacts {
    archives javadocJar
    archives examplesJar
    archives sourcesJar
}

publishing {
  publications {
    mavenJava(MavenPublication) {
      from components.java

      artifact javadocJar { classifier "javadoc" }
      artifact examplesJar { classifier "examples" }
      artifact sourcesJar { classifier "sources" }
      pom.withXml {
        asNode().appendNode("name", componentName)
        asNode().appendNode("description", componentDesc)
	    asNode().appendNode("url", "https://interlok.adaptris.net/interlok-docs/#/")
        def properties = asNode().appendNode("properties")
        properties.appendNode("target", "4.0.0+")
        properties.appendNode("tags", "rest,metrics,jvm")
        properties.appendNode("license", "false")
        properties.appendNode("repository", "https://github.com/adaptris/interlok-workflow-rest-services")
      }
    }
  }
  repositories {
    maven {
      credentials {
        username repoUsername
        password repoPassword
      }
      url mavenPublishUrl
    }
  }
}

delombok {
  target = delombokTargetDir
}

task deleteGeneratedFiles(type: Delete) {
  delete delombokTargetDir
}

clean.dependsOn deleteGeneratedFiles
